# Portalis Monorepo – Schnellstart (erweitert)
# Enthält: Repo-Struktur, docker-compose, Dockerfiles, Makefile, Cursor-Basisprompt,
# plus Starter-Entities (Symfony), Seeder und OpenAPI-Typegen Script.

###############################################################
# 1) Starter-Entities für Symfony API (apps/symfony-api/src/Entity)
###############################################################

# src/Entity/Country.php
<?php
namespace App\Entity;

use ApiPlatform\Metadata\ApiResource;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ApiResource]
class Country
{
    #[ORM\Id, ORM\GeneratedValue, ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\Column(type: 'string', length: 100)]
    private string $name;

    #[ORM\Column(type: 'string', length: 10, unique: true)]
    private string $slug;

    #[ORM\Column(type: 'string', length: 2)]
    private string $iso2;

    #[ORM\Column(type: 'string', length: 50)]
    private string $continent;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $summary = null;

    #[ORM\Column(type: 'float', nullable: true)]
    private ?float $costOfLivingIndex = null;

    #[ORM\Column(type: 'float', nullable: true)]
    private ?float $taxRate = null;

    #[ORM\Column(type: 'datetime_immutable')]
    private \DateTimeImmutable $createdAt;

    #[ORM\Column(type: 'datetime_immutable')]
    private \DateTimeImmutable $updatedAt;

    public function __construct()
    {
        $this->createdAt = new \DateTimeImmutable();
        $this->updatedAt = new \DateTimeImmutable();
    }
    // Getter & Setter …
}

# src/Entity/ResidencyProgram.php
<?php
namespace App\Entity;

use ApiPlatform\Metadata\ApiResource;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ApiResource]
class ResidencyProgram
{
    #[ORM\Id, ORM\GeneratedValue, ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Country::class)]
    private Country $country;

    #[ORM\Column(type: 'string', length: 50)]
    private string $type; // residency|work|investor|digital_nomad

    #[ORM\Column(type: 'string', length: 150)]
    private string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $requirements = null;

    #[ORM\Column(type: 'float', nullable: true)]
    private ?float $fees = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    private ?int $processingTimeDays = null;

    // Getter & Setter …
}

# src/Entity/Provider.php
<?php
namespace App\Entity;

use ApiPlatform\Metadata\ApiResource;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ApiResource]
class Provider
{
    #[ORM\Id, ORM\GeneratedValue, ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\Column(type: 'string', length: 150)]
    private string $name;

    #[ORM\ManyToOne(targetEntity: Country::class)]
    private Country $country;

    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    private ?string $city = null;

    #[ORM\Column(type: 'string', length: 150, nullable: true)]
    private ?string $email = null;

    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    private ?string $phone = null;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $services = null;

    #[ORM\Column(type: 'float', nullable: true)]
    private ?float $rating = null;
}

# src/Entity/ChecklistItem.php
<?php
namespace App\Entity;

use ApiPlatform\Metadata\ApiResource;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ApiResource]
class ChecklistItem
{
    #[ORM\Id, ORM\GeneratedValue, ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Country::class)]
    private Country $country;

    #[ORM\Column(type: 'string', length: 150)]
    private string $title;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $description = null;

    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    private ?string $category = null;

    #[ORM\Column(type: 'integer')]
    private int $orderIndex;
}

###############################################################
# 2) Seeder (apps/symfony-api/src/Command/SeedDemoCommand.php)
###############################################################

<?php
namespace App\Command;

use App\Entity\Country;
use App\Entity\ResidencyProgram;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(name: 'app:seed:demo')]
class SeedDemoCommand extends Command
{
    public function __construct(private EntityManagerInterface $em)
    {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $georgia = (new Country())
            ->setName('Georgien')
            ->setSlug('georgia')
            ->setIso2('GE')
            ->setContinent('Asien')
            ->setSummary('Beliebt für Digital Nomads, einfaches Visum.')
            ->setCostOfLivingIndex(35.5)
            ->setTaxRate(20);

        $paraguay = (new Country())
            ->setName('Paraguay')
            ->setSlug('paraguay')
            ->setIso2('PY')
            ->setContinent('Südamerika')
            ->setSummary('Residency durch einfache Einzahlung möglich.')
            ->setCostOfLivingIndex(30.1)
            ->setTaxRate(10);

        $hungary = (new Country())
            ->setName('Ungarn')
            ->setSlug('hungary')
            ->setIso2('HU')
            ->setContinent('Europa')
            ->setSummary('EU-Mitglied, günstige Firmengründung.')
            ->setCostOfLivingIndex(45.7)
            ->setTaxRate(9);

        $this->em->persist($georgia);
        $this->em->persist($paraguay);
        $this->em->persist($hungary);

        $program = (new ResidencyProgram())
            ->setCountry($georgia)
            ->setType('digital_nomad')
            ->setName('Georgia Digital Nomad Visa')
            ->setRequirements('Remote income, min. 2k USD/Monat')
            ->setFees(0)
            ->setProcessingTimeDays(7);
        $this->em->persist($program);

        $this->em->flush();
        $output->writeln('Seed data inserted.');
        return Command::SUCCESS;
    }
}

###############################################################
# 3) OpenAPI-Typegen Script (packages/shared/package.json)
###############################################################

{
  "name": "@portalis/shared",
  "version": "1.0.0",
  "scripts": {
    "generate:openapi": "openapi-typescript http://localhost:8080/docs.json -o src/openapi.d.ts"
  },
  "devDependencies": {
    "openapi-typescript": "^6.7.0"
  }
}

###############################################################
# 4) Nächste Schritte
###############################################################
# - Doctrine Entities generieren: php bin/console make:migration && php bin/console doctrine:migrations:migrate -n
# - Seeder laufen lassen: php bin/console app:seed:demo
# - Danach: npm run generate:openapi in packages/shared → Typen für Next.js verfügbar
# - Im Frontend (apps/web) dann: import { paths } from "@/shared/src/openapi";
